import { INestApplication } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';

export function setupSwagger(app: INestApplication): void {
  const config = new DocumentBuilder()
    .setTitle('Learning Managment System Platformasi')
    .setVersion('1.0')
    .setDescription(`ðŸŸ¦ 1-BOâ€˜LIM: API Loyihasi haqida

Assalomu alaykum!
Ushbu Swagger hujjati â€” Learning Management System (LMS) platformasi uchun ishlab chiqilgan backend API'ga tegishli. Bu platforma orqali foydalanuvchilar:

    kurslarga yozilish,

    darslarni oâ€˜rganish,

    imtihon va testlar topshirish,

    uyga vazifalarni yuborish,

    mentor va assistentlar bilan oâ€˜zaro aloqada boâ€˜lish

imkoniyatlariga ega boâ€˜lishadi.

Bu API ayniqsa yangi oâ€˜qishni istagan oâ€˜quvchilar uchun foydali boâ€˜lib, imtihon, test, ball, baholash, kurslar, homework, va chat kabi barcha asosiy funksiyalarni qamrab oladi.
ðŸŸ¨ 2-BOâ€˜LIM: Ishlatilgan Texnologiyalar

Ushbu loyiha zamonaviy mikroservis arxitekturasi asosida quyidagi texnologiyalar yordamida qurilgan:
ðŸ§  Backend (API) Texnologiyalari:

    NestJS â€” modulga asoslangan TypeScript framework

    TypeScript â€” qat'iy tipga ega dasturlash tili

    Prisma ORM â€” PostgreSQL bilan integratsiyalashgan kuchli ORM

    PostgreSQL â€” asosiy ma'lumotlar bazasi

    Redis â€” OTP, caching va bloklash uchun ishlatiladi

    RabbitMQ â€” mikroservislar orasida xabar almashinuvi uchun message broker

    CI/CD (GitHub Actions) â€” avtomatik deploy va testlar

ðŸ¤– Telegram Bot Texnologiyalari:

    Grammy.js â€” bot yozish uchun kuchli va qulay JS/TS kutubxona

    Microservice-based Architecture â€” bot va backend alohida mustaqil servislar sifatida ishlaydi

    Bot va API oâ€˜rtasida RabbitMQ orqali real-time aloqa oâ€˜rnatilgan

Bot adminlar uchun qulay panel taqdim etadi:
âœ… Yangi kelgan xabarlar,
âœ… Bloklangan foydalanuvchilar,
âœ… Parol bilan kirish va monitoring funksiyalari mavjud.
ðŸŸ¥ 3-BOâ€˜LIM: Qiyinchiliklar va Tajribalar

Loyiha davomida quyidagi muammolar va murakkab jihatlar boâ€˜ldi:
1. CI/CD bilan ishlash

    GitHub Actions orqali auto-deployni sozlashda docker-compose, env, va permissions muammolari boâ€˜ldi.

    Ularni skriptlar orqali bosqichma-bosqich boshqarish (pull, build, up) qoâ€˜lda tahlil qilindi.

2. Prisma bilan Join va Subquery yozish

    Prisma da kompleks join, where, orderBy va include operatsiyalarini yozish juda murakkab boâ€˜ldi.

    Xususan HomeworkSubmission, Course va Users oâ€˜rtasidagi bogâ€˜lanmalarni filtr bilan olishda chalkashliklar boâ€˜ldi.

3. Telegram botda inline tugmalar va real-time ishlash

    Inline tugmalar bosilganda eski tugmalarni tozalash (editMessageReplyMarkup) noqulay holatlarni keltirib chiqardi.

    RabbitMQ bilan real-time chatni sozlash, blocked users logikasini yaratish anchayin mashaqqatli boâ€˜ldi.`)
    .addBearerAuth()
    .build()

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('swagger', app, document);
}
